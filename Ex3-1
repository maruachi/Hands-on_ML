from sklearn.datasets import fetch_openml
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import numpy as np

def gaussian_kernel(distance):
    weights = 2**gamma / distance ** 2
    return weights / np.sum(weights)

mnist = fetch_openml('mnist_784', version=1, as_frame = False)
mnist.keys()

X, y = mnist["data"], mnist["target"]
print(X.shape)
print(y.shape)
X_train, X_test, y_train, y_test = X[:60000], X[60000:], y[:60000], y[60000:]
print(X_train.shape)
print(X_test.shape)

print("Start grid search")
accuracys = []
for weigh in [1, 3, 5, 7]:
    tmp = []
    for n in [3, 4, 5, 6]:
        gamma = weigh
        neigh = KNeighborsClassifier(n_neighbors=n, metric='euclidean', weights=gaussian_kernel)
        neigh.fit(X_train, y_train)
        y_pred = neigh.predict(X_test)
        tmp.append(accuracy_score(y_test, y_pred))
    accuracys.append(tmp)

print(accuracys)
max_val = 0
for accuracy in accuracys:
    for x in accuracy:
        if max_val < x:
            max_val = x
print(max_val)
